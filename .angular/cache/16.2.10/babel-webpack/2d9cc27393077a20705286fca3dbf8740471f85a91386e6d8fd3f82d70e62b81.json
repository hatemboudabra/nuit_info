{"ast":null,"code":"import { of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class TranslateService {\n  constructor() {\n    this.translations = {\n      'greeting.message': 'Hello, World!'\n      // Add more translations as needed\n    };\n  }\n\n  getTranslation(key) {\n    const translation = this.translations[key] || key; // Fallback to the key if translation is not found\n    return of(translation);\n  }\n  static #_ = this.ɵfac = function TranslateService_Factory(t) {\n    return new (t || TranslateService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TranslateService,\n    factory: TranslateService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["of","TranslateService","constructor","translations","getTranslation","key","translation","_","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\ASUS\\Desktop\\nuitInfofront\\src\\app\\translate.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {Observable, of} from 'rxjs';\n@Injectable({\n  providedIn: 'root'\n})\nexport class TranslateService {\n constructor() { }\n private translations: { [key: string]: string } = {\n  'greeting.message': 'Hello, World!'\n  // Add more translations as needed\n};\n\ngetTranslation(key: string): Observable<string> {\n  const translation = this.translations[key] || key; // Fallback to the key if translation is not found\n  return of(translation);\n}\n}\n"],"mappings":"AACA,SAAoBA,EAAE,QAAO,MAAM;;AAInC,OAAM,MAAOC,gBAAgB;EAC5BC,YAAA;IACQ,KAAAC,YAAY,GAA8B;MACjD,kBAAkB,EAAE;MACpB;KACD;EAJgB;;EAMjBC,cAAcA,CAACC,GAAW;IACxB,MAAMC,WAAW,GAAG,IAAI,CAACH,YAAY,CAACE,GAAG,CAAC,IAAIA,GAAG,CAAC,CAAC;IACnD,OAAOL,EAAE,CAACM,WAAW,CAAC;EACxB;EAAC,QAAAC,CAAA,G;qBAVYN,gBAAgB;EAAA;EAAA,QAAAO,EAAA,G;WAAhBP,gBAAgB;IAAAQ,OAAA,EAAhBR,gBAAgB,CAAAS,IAAA;IAAAC,UAAA,EAFf;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}